#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'Ast.rb'
require_relative 'Lexer.rb'
require_relative 'SegregateTks'

class SyntacticError < RuntimeError
	def initialize(tk)
		@token = tk
	end

	def to_s
		tk.unexpected
	end
end

class Parser < Racc::Parser

module_eval(<<'...end Parser.y/module_eval...', 'Parser.y', 260)
	def on_error(id, token, stack)
	  puts "Error SintÃ¡ctico"
	  if token == false
	  	puts "token inesperado"
		return
	  end
      puts token.unexpected
    end

	def next_token
		token = @catch.shift
		return [false, false] unless token
		return [token.class, token]
	end

	def parse(lexerCatch)
		@yydebug = true
		@catch = lexerCatch
		ast = do_parse
		return ast
	end
...end Parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    58,     9,    75,    76,    31,    32,    17,    18,    19,    20,
    31,    32,    21,    22,   291,   166,   136,    23,   154,     3,
    17,    18,    19,   167,    31,    32,   168,   169,   261,   229,
   166,   170,    98,   144,   165,    17,    18,    19,   167,     6,
   180,   168,   169,   137,   145,   155,   170,    16,    72,   165,
   179,   233,   166,    71,   250,    31,    32,    17,    18,    19,
   167,   159,   234,   168,   169,   251,   101,     9,   170,   104,
   105,   165,    17,    18,    19,    20,   159,   186,    21,    22,
   284,   166,    30,    23,    31,    32,    17,    18,    19,   167,
    31,    32,   168,   169,    78,   226,   166,   170,   159,   187,
   165,    17,    18,    19,   167,   178,   175,   168,   169,    75,
    76,    77,   170,    16,   190,   165,   213,   166,   193,   173,
    31,    32,    17,    18,    19,   167,   172,   159,   168,   169,
   153,   184,   166,   170,   152,   196,   165,    17,    18,    19,
   167,   150,   159,   168,   169,    37,   198,    38,   170,   157,
   166,   165,    75,    76,    77,    17,    18,    19,   167,   149,
   200,   168,   169,   159,   268,   166,   170,   201,   202,   165,
    17,    18,    19,   167,   146,   205,   168,   169,   159,   206,
   207,   170,   236,   166,   165,   189,   208,    38,    17,    18,
    19,   167,    75,   141,   168,   169,   159,   263,     9,   170,
   211,   140,   165,    17,    18,    19,    20,   139,   138,    21,
    22,   159,   216,   135,    23,   222,     9,   134,    78,    79,
   220,    17,    18,    19,    20,   107,   103,    21,    22,   159,
   147,     9,    23,    75,    76,    77,    17,    18,    19,    20,
   224,   102,    21,    22,    16,    96,    95,    23,   127,     9,
   230,   231,    93,    38,    17,    18,    19,    20,    70,   128,
    21,    22,    16,   239,   166,    23,    65,   240,   241,    17,
    18,    19,   167,   242,   243,   168,   169,    16,    61,   245,
   170,   130,     9,   165,   246,   247,   248,    17,    18,    19,
    20,   249,    60,    21,    22,    16,   219,   166,    23,   252,
    59,   255,    17,    18,    19,   167,   256,    55,   168,   169,
   159,   258,   259,   170,   133,     9,   165,   260,   182,    39,
    17,    18,    19,    20,   264,   265,    21,    22,    16,    63,
     9,    23,   266,    36,   269,    17,    18,    19,    20,   270,
   271,    21,    22,   159,    28,   273,    23,   177,     9,   274,
   275,   276,   277,    17,    18,    19,    20,   278,    27,    21,
    22,    16,   253,   166,    23,    47,    48,    50,    17,    18,
    19,   167,   281,    51,   168,   169,    16,    49,   282,   170,
   166,    26,   165,     6,   286,    17,    18,    19,   167,    41,
    46,   168,   169,   287,    16,     9,   170,    24,   244,   165,
    17,    18,    19,    20,   289,     7,    21,    22,     9,   159,
   292,    23,   293,    17,    18,    19,    20,    78,    79,    21,
    22,   294,    80,    81,    23,   215,   159,   nil,   nil,   nil,
    73,    74,    75,    76,    77,    82,    85,    83,    84,    86,
    87,    16,   nil,   nil,    78,    79,   nil,   nil,   nil,    80,
    81,   nil,   nil,   nil,    16,   203,   nil,    73,    74,    75,
    76,    77,    82,    85,    83,    84,    86,    87,   nil,   204,
   nil,   nil,   nil,   nil,    78,    79,   nil,   nil,   nil,    80,
    81,   288,   nil,   nil,   nil,   nil,   nil,    73,    74,    75,
    76,    77,    82,    85,    83,    84,    86,    87,   nil,   nil,
    78,    79,   nil,   nil,   nil,    80,    81,   nil,   nil,   nil,
   279,   nil,   nil,    73,    74,    75,    76,    77,    82,    85,
    83,    84,    86,    87,   280,   nil,   nil,   nil,   nil,    78,
    79,   nil,   nil,   nil,    80,    81,    92,   nil,   nil,   nil,
   nil,   nil,    73,    74,    75,    76,    77,    82,    85,    83,
    84,    86,    87,   nil,   nil,    78,    79,   nil,   nil,   nil,
    80,    81,   nil,   nil,   nil,   nil,   nil,   nil,    73,    74,
    75,    76,    77,    82,    85,    83,    84,    86,    87,    91,
   nil,   nil,   nil,   nil,    78,    79,   nil,   nil,   nil,   nil,
    78,    79,   nil,   nil,   nil,    80,    81,    73,    74,    75,
    76,    77,    82,    73,    74,    75,    76,    77,    82,    85,
    83,    84,    86,    87,   214,   nil,   nil,   nil,   nil,    78,
    79,   nil,   nil,   nil,   nil,    78,    79,   nil,   nil,   nil,
    80,    81,    73,    74,    75,    76,    77,   nil,    73,    74,
    75,    76,    77,    82,    85,    83,    84,    86,    87,   257,
    78,    79,   nil,   nil,   nil,    78,    79,   nil,   nil,   nil,
    80,    81,   nil,    73,   nil,    75,    76,    77,    73,    74,
    75,    76,    77,    82,    85,    83,    84,    86,    87,   151,
   nil,   nil,   nil,   nil,   nil,    78,    79,   nil,   nil,   nil,
    80,    81,   nil,   nil,   nil,   nil,   nil,   nil,    73,    74,
    75,    76,    77,    82,    85,    83,    84,    86,    87,   217,
   nil,   nil,    78,    79,   nil,   nil,   nil,    80,    81,   nil,
   nil,   nil,   nil,   nil,   nil,    73,    74,    75,    76,    77,
    82,    85,    83,    84,    86,    87,    94,   nil,   nil,    78,
    79,   nil,   nil,   nil,    80,    81,   nil,   nil,   nil,   nil,
   nil,   nil,    73,    74,    75,    76,    77,    82,    85,    83,
    84,    86,    87,    47,    48,    50,    47,    48,    50,   nil,
   nil,    51,   nil,   nil,    51,    49,   nil,   nil,    49,   nil,
   nil,    47,    48,    50,    47,    48,    50,    41,    46,    51,
    41,    46,    51,    49,   nil,   nil,    49,   nil,   nil,    47,
    48,    50,    47,    48,    50,    41,    46,    51,    41,    46,
    51,    49,   nil,   nil,    49,   nil,   nil,    47,    48,    50,
    47,    48,    50,    41,    46,    51,    41,    46,    51,    49,
   nil,   nil,    49,   nil,   nil,   nil,   nil,   nil,    47,    48,
    50,    41,    46,    44,    41,    46,    51,    47,    48,    50,
    49,   nil,    47,    48,    50,    51,   nil,   nil,   nil,    49,
    51,   nil,    41,    46,    49,   nil,    47,    48,    50,   nil,
   nil,    41,    46,   nil,    51,   nil,    41,    46,    49,   nil,
    47,    48,    50,   nil,   nil,    47,    48,    50,    51,   nil,
    41,    46,    49,    51,    47,    48,    50,    49,   nil,    47,
    48,    50,    51,   nil,    41,    46,    49,    51,   nil,    41,
    46,    49,   nil,    47,    48,    50,   nil,   nil,    41,    46,
   nil,    51,   nil,    41,    46,    49,   nil,    47,    48,    50,
   nil,   nil,    47,    48,    50,    51,   nil,    41,    46,    49,
    51,    47,    48,    50,    49,   nil,    47,    48,    50,    51,
   nil,    41,    46,    49,    51,   nil,    41,    46,    49,   nil,
    47,    48,    50,   nil,   nil,    41,    46,   nil,    51,   nil,
    41,    46,    49,   nil,    47,    48,    50,   nil,   nil,    47,
    48,    50,    51,   nil,    41,    46,    49,    51,    67,   nil,
   nil,    49,   nil,    47,    48,    50,   nil,   nil,    41,    46,
   nil,    51,   nil,    41,    46,    49,   nil,    47,    48,    50,
   nil,   nil,    47,    48,    50,    51,   nil,    41,    46,    49,
    51,    47,    48,    50,    49,   nil,    47,    48,    50,    51,
   nil,    41,    46,    49,    51,   nil,    41,    46,    49,   nil,
    47,    48,    50,   nil,   nil,    41,    46,   nil,    51,   nil,
    41,    46,    49,   nil,    47,    48,    50,   nil,   nil,    47,
    48,    50,    51,   nil,    41,    46,    49,    51,    47,    48,
    50,    49,   nil,    47,    48,    50,    51,   nil,    41,    46,
    49,    51,    44,    41,    46,    49,   nil,    47,    48,    50,
   nil,    44,    41,    46,   nil,    51,   nil,    41,    46,    49,
   nil,    47,    48,    50,   nil,   nil,    47,    48,    50,    51,
   nil,    41,    46,    49,    51,    47,    48,    50,    49,   nil,
   nil,   nil,   nil,    51,   nil,    41,    46,    49,   nil,   nil,
    41,    46,    78,    79,   nil,   nil,   nil,    80,    81,    41,
    46,   nil,   nil,   nil,   108,    73,    74,    75,    76,    77,
    82,    85,    83,    84,    86,    87,    78,    79,   nil,   nil,
   nil,    80,    81,   106,   nil,   nil,   nil,   nil,   nil,    73,
    74,    75,    76,    77,    82,    85,    83,    84,    86,    87,
    78,    79,   nil,   nil,   nil,    80,    81,   174,   nil,   nil,
   nil,   nil,   nil,    73,    74,    75,    76,    77,    82,    85,
    83,    84,    86,    87,    78,    79,   nil,   nil,   nil,    80,
    81,   nil,   nil,   nil,   nil,   nil,   nil,    73,    74,    75,
    76,    77,    82,    85,    83,    84,    86,    87,    78,    79,
   nil,   nil,   nil,    80,    81,   nil,   nil,   nil,   nil,   125,
   nil,    73,    74,    75,    76,    77,    82,    85,    83,    84,
    86,    87,    78,    79,   nil,   nil,   nil,    80,    81,   227,
   nil,   nil,   nil,   nil,   nil,    73,    74,    75,    76,    77,
    82,    85,    83,    84,    86,    87,    78,    79,   nil,   nil,
   nil,    80,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    73,
    74,    75,    76,    77,    82,    85,    83,    84,    86,    87,
    78,    79,   nil,   nil,   nil,    80,    81,   210,   nil,   nil,
   nil,    78,    79,    73,    74,    75,    76,    77,    82,    85,
    83,    84,    86,    87,    73,    74,    75,    76,    77,    82,
    85,    83,    84,    86,    87,    78,    79,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    78,    79,   nil,    73,    74,
    75,    76,    77,    82,    85,    83,    84,    86,    73,    74,
    75,    76,    77,    82,    85,    83,    84,    78,    79,   nil,
   nil,   nil,   nil,   nil,   nil,    78,    79,   nil,   nil,   nil,
    73,    74,    75,    76,    77,    82,    85,    83,    73,    74,
    75,    76,    77,    82,    85 ]

racc_action_check = [
    24,    24,   114,   114,    59,    59,    24,    24,    24,    24,
    33,    33,    24,    24,   288,   288,    98,    24,   135,     0,
   288,   288,   288,   288,   137,   137,   288,   288,   242,   211,
   211,   288,    59,   126,   288,   211,   211,   211,   211,     0,
   149,   211,   211,    98,   126,   135,   211,    24,    42,   211,
   148,   214,   214,    42,   232,   155,   155,   214,   214,   214,
   214,   288,   214,   214,   214,   232,    61,    61,   214,    65,
    65,   214,    61,    61,    61,    61,   211,   156,    61,    61,
   279,   279,     9,    61,     9,     9,   279,   279,   279,   279,
   172,   172,   279,   279,   116,   207,   207,   279,   214,   157,
   279,   207,   207,   207,   207,   147,   144,   207,   207,   116,
   116,   116,   207,    61,   164,   207,   193,   193,   166,   139,
   166,   166,   193,   193,   193,   193,   138,   279,   193,   193,
   133,   154,   154,   193,   132,   169,   193,   154,   154,   154,
   154,   130,   207,   154,   154,    16,   171,    16,   154,   136,
   136,   154,   115,   115,   115,   136,   136,   136,   136,   129,
   176,   136,   136,   193,   251,   251,   136,   177,   179,   136,
   251,   251,   251,   251,   127,   183,   251,   251,   154,   184,
   185,   251,   215,   215,   251,   159,   186,   159,   215,   215,
   215,   215,   113,   102,   215,   215,   136,   244,   244,   215,
   192,   101,   215,   244,   244,   244,   244,   100,    99,   244,
   244,   251,   196,    97,   244,   203,   203,    95,   110,   110,
   200,   203,   203,   203,   203,    68,    63,   203,   203,   215,
   128,   128,   203,   110,   110,   110,   128,   128,   128,   128,
   205,    62,   128,   128,   244,    58,    57,   128,    91,    91,
   212,   213,    55,    41,    91,    91,    91,    91,    39,    91,
    91,    91,   203,   217,   217,    91,    34,   218,   219,   217,
   217,   217,   217,   221,   222,   217,   217,   128,    29,   225,
   217,    92,    92,   217,   226,   228,   229,    92,    92,    92,
    92,   230,    28,    92,    92,    91,   198,   198,    92,   233,
    26,   235,   198,   198,   198,   198,   236,    22,   198,   198,
   217,   238,   239,   198,    94,    94,   198,   240,   152,    17,
    94,    94,    94,    94,   245,   247,    94,    94,    92,    30,
    30,    94,   250,    15,   253,    30,    30,    30,    30,   254,
   255,    30,    30,   198,     8,   258,    30,   145,   145,   262,
   263,   267,   268,   145,   145,   145,   145,   270,     7,   145,
   145,    94,   234,   234,   145,   151,   151,   151,   234,   234,
   234,   234,   274,   151,   234,   234,    30,   151,   276,   234,
   158,     6,   234,     5,   283,   158,   158,   158,   158,   151,
   151,   158,   158,   284,   145,    10,   158,     4,   223,   158,
    10,    10,    10,    10,   286,     1,    10,    10,     3,   234,
   290,    10,   291,     3,     3,     3,     3,   223,   223,     3,
     3,   292,   223,   223,     3,   195,   158,   nil,   nil,   nil,
   223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
   223,    10,   nil,   nil,   195,   195,   nil,   nil,   nil,   195,
   195,   nil,   nil,   nil,     3,   181,   nil,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   195,   195,   nil,   181,
   nil,   nil,   nil,   nil,   181,   181,   nil,   nil,   nil,   181,
   181,   285,   nil,   nil,   nil,   nil,   nil,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   nil,   nil,
   285,   285,   nil,   nil,   nil,   285,   285,   nil,   nil,   nil,
   272,   nil,   nil,   285,   285,   285,   285,   285,   285,   285,
   285,   285,   285,   285,   272,   nil,   nil,   nil,   nil,   272,
   272,   nil,   nil,   nil,   272,   272,    54,   nil,   nil,   nil,
   nil,   nil,   272,   272,   272,   272,   272,   272,   272,   272,
   272,   272,   272,   nil,   nil,    54,    54,   nil,   nil,   nil,
    54,    54,   nil,   nil,   nil,   nil,   nil,   nil,    54,    54,
    54,    54,    54,    54,    54,    54,    54,    54,    54,    53,
   nil,   nil,   nil,   nil,   122,   122,   nil,   nil,   nil,   nil,
    53,    53,   nil,   nil,   nil,    53,    53,   122,   122,   122,
   122,   122,   122,    53,    53,    53,    53,    53,    53,    53,
    53,    53,    53,    53,   194,   nil,   nil,   nil,   nil,   119,
   119,   nil,   nil,   nil,   nil,   194,   194,   nil,   nil,   nil,
   194,   194,   119,   119,   119,   119,   119,   nil,   194,   194,
   194,   194,   194,   194,   194,   194,   194,   194,   194,   237,
   111,   111,   nil,   nil,   nil,   237,   237,   nil,   nil,   nil,
   237,   237,   nil,   111,   nil,   111,   111,   111,   237,   237,
   237,   237,   237,   237,   237,   237,   237,   237,   237,   131,
   nil,   nil,   nil,   nil,   nil,   131,   131,   nil,   nil,   nil,
   131,   131,   nil,   nil,   nil,   nil,   nil,   nil,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   197,
   nil,   nil,   197,   197,   nil,   nil,   nil,   197,   197,   nil,
   nil,   nil,   nil,   nil,   nil,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   197,    56,   nil,   nil,    56,
    56,   nil,   nil,   nil,    56,    56,   nil,   nil,   nil,   nil,
   nil,   nil,    56,    56,    56,    56,    56,    56,    56,    56,
    56,    56,    56,    51,    51,    51,    50,    50,    50,   nil,
   nil,    51,   nil,   nil,    50,    51,   nil,   nil,    50,   nil,
   nil,   204,   204,   204,   168,   168,   168,    51,    51,   204,
    50,    50,   168,   204,   nil,   nil,   168,   nil,   nil,    49,
    49,    49,   189,   189,   189,   204,   204,    49,   168,   168,
   189,    49,   nil,   nil,   189,   nil,   nil,   170,   170,   170,
    71,    71,    71,    49,    49,   170,   189,   189,    71,   170,
   nil,   nil,    71,   nil,   nil,   nil,   nil,   nil,    73,    73,
    73,   170,   170,    71,    71,    71,    73,    74,    74,    74,
    73,   nil,    75,    75,    75,    74,   nil,   nil,   nil,    74,
    75,   nil,    73,    73,    75,   nil,    76,    76,    76,   nil,
   nil,    74,    74,   nil,    76,   nil,    75,    75,    76,   nil,
    77,    77,    77,   nil,   nil,    78,    78,    78,    77,   nil,
    76,    76,    77,    78,    79,    79,    79,    78,   nil,    80,
    80,    80,    79,   nil,    77,    77,    79,    80,   nil,    78,
    78,    80,   nil,    81,    81,    81,   nil,   nil,    79,    79,
   nil,    81,   nil,    80,    80,    81,   nil,    82,    82,    82,
   nil,   nil,    83,    83,    83,    82,   nil,    81,    81,    82,
    83,    84,    84,    84,    83,   nil,    85,    85,    85,    84,
   nil,    82,    82,    84,    85,   nil,    83,    83,    85,   nil,
    86,    86,    86,   nil,   nil,    84,    84,   nil,    86,   nil,
    85,    85,    86,   nil,    87,    87,    87,   nil,   nil,    38,
    38,    38,    87,   nil,    86,    86,    87,    38,    38,   nil,
   nil,    38,   nil,    37,    37,    37,   nil,   nil,    87,    87,
   nil,    37,   nil,    38,    38,    37,   nil,   165,   165,   165,
   nil,   nil,    93,    93,    93,   165,   nil,    37,    37,   165,
    93,   167,   167,   167,    93,   nil,    23,    23,    23,   167,
   nil,   165,   165,   167,    23,   nil,    93,    93,    23,   nil,
    21,    21,    21,   nil,   nil,   167,   167,   nil,    21,   nil,
    23,    23,    21,   nil,    20,    20,    20,   nil,   nil,    19,
    19,    19,    20,   nil,    21,    21,    20,    19,    18,    18,
    18,    19,   nil,   257,   257,   257,    18,   nil,    20,    20,
    18,   257,    19,    19,    19,   257,   nil,   280,   280,   280,
   nil,    18,    18,    18,   nil,   280,   nil,   257,   257,   280,
   nil,   105,   105,   105,   nil,   nil,   108,   108,   108,   105,
   nil,   280,   280,   105,   108,   216,   216,   216,   108,   nil,
   nil,   nil,   nil,   216,   nil,   105,   105,   216,   nil,   nil,
   108,   108,    69,    69,   nil,   nil,   nil,    69,    69,   216,
   216,   nil,   nil,   nil,    69,    69,    69,    69,    69,    69,
    69,    69,    69,    69,    69,    69,    66,    66,   nil,   nil,
   nil,    66,    66,    66,   nil,   nil,   nil,   nil,   nil,    66,
    66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
   142,   142,   nil,   nil,   nil,   142,   142,   142,   nil,   nil,
   nil,   nil,   nil,   142,   142,   142,   142,   142,   142,   142,
   142,   142,   142,   142,    43,    43,   nil,   nil,   nil,    43,
    43,   nil,   nil,   nil,   nil,   nil,   nil,    43,    43,    43,
    43,    43,    43,    43,    43,    43,    43,    43,    90,    90,
   nil,   nil,   nil,    90,    90,   nil,   nil,   nil,   nil,    90,
   nil,    90,    90,    90,    90,    90,    90,    90,    90,    90,
    90,    90,   209,   209,   nil,   nil,   nil,   209,   209,   209,
   nil,   nil,   nil,   nil,   nil,   209,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   118,   118,   nil,   nil,
   nil,   118,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   191,   191,   nil,   nil,   nil,   191,   191,   191,   nil,   nil,
   nil,   117,   117,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   124,   124,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   123,   123,   nil,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   124,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   121,   121,   nil,
   nil,   nil,   nil,   nil,   nil,   120,   120,   nil,   nil,   nil,
   121,   121,   121,   121,   121,   121,   121,   121,   120,   120,
   120,   120,   120,   120,   120 ]

racc_action_pointer = [
    17,   405,   nil,   404,   395,   361,   331,   358,   341,    77,
   391,   nil,   nil,   nil,   nil,   302,   113,   269,  1042,  1033,
  1028,  1014,   257,  1000,    -3,   nil,   266,   nil,   261,   273,
   326,   nil,   nil,     3,   216,   nil,   nil,   967,   953,   227,
   nil,   219,    17,  1180,   nil,   nil,   nil,   nil,   nil,   773,
   740,   737,   nil,   566,   531,   235,   715,   243,   214,    -3,
   nil,    63,   238,   195,   nil,    38,  1132,   nil,   190,  1108,
   nil,   794,   nil,   812,   821,   826,   840,   854,   859,   868,
   873,   887,   901,   906,   915,   920,   934,   948,   nil,   nil,
  1204,   245,   278,   986,   311,   186,   nil,   178,    10,   158,
   204,   170,   162,   nil,   nil,  1075,   nil,   nil,  1080,   nil,
   194,   626,   nil,   153,   -37,   113,    70,  1287,  1252,   595,
  1351,  1343,   560,  1321,  1311,   nil,    30,   143,   227,   156,
   110,   661,   131,    99,   nil,    12,   146,    17,    90,    88,
   nil,   nil,  1156,   nil,    75,   344,   nil,    74,    47,     9,
   nil,   339,   287,   nil,   128,    48,    74,    68,   376,   153,
   nil,   nil,   nil,   nil,    83,   981,   113,   995,   758,    85,
   791,   140,    83,   nil,   nil,   nil,   157,   136,   nil,   137,
   nil,   450,   nil,   172,   148,   174,   155,   nil,   nil,   776,
   nil,  1276,   195,   113,   601,   420,   195,   688,   293,   nil,
   189,   nil,   nil,   212,   755,   209,   nil,    92,   nil,  1228,
   nil,    26,   247,   220,    48,   179,  1089,   260,   264,   237,
   nil,   270,   243,   393,   nil,   276,   253,   nil,   282,   255,
   260,   nil,    51,   268,   359,   298,   275,   631,   308,   281,
   286,   nil,    -3,   nil,   194,   293,   nil,   294,   nil,   nil,
   301,   161,   nil,   303,   336,   309,   nil,  1047,   314,   nil,
   nil,   nil,   346,   319,   nil,   nil,   nil,   348,   321,   nil,
   326,   nil,   505,   nil,   341,   nil,   347,   nil,   nil,    77,
  1061,   nil,   nil,   381,   362,   476,   373,   nil,    11,   nil,
   407,   381,   390,   nil,   nil ]

racc_action_default = [
  -111,  -111,    -1,  -111,    -5,   -11,  -111,  -111,  -111,  -111,
   -27,   -30,   -31,   -32,   -33,  -111,  -111,  -111,  -111,  -111,
  -111,  -111,  -111,  -111,  -111,   -10,  -111,   295,  -111,  -111,
  -111,   -22,   -23,   -25,  -111,   -26,   -34,  -111,  -111,  -111,
   -50,   -90,  -111,   -84,   -85,   -88,   -89,   -91,   -92,  -111,
  -111,  -111,   -51,  -111,  -111,  -111,  -111,  -111,  -111,  -111,
    -2,  -111,  -111,  -111,   -24,  -111,  -111,   -80,  -111,   -87,
   -49,  -111,   -83,  -111,  -111,  -111,  -111,  -111,  -111,  -111,
  -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,   -93,   -94,
  -111,  -111,  -111,  -111,  -111,  -111,    -4,  -111,  -111,  -111,
  -111,  -111,  -111,    -8,   -47,  -111,   -35,   -81,  -111,   -82,
   -96,   -97,   -98,   -99,  -100,  -101,  -102,  -103,  -104,  -105,
  -106,  -107,  -108,  -109,  -110,   -95,  -111,  -111,  -111,  -111,
  -111,  -111,  -111,  -111,    -3,  -111,  -111,  -111,   -21,  -111,
    -9,    -7,  -111,   -86,  -111,  -111,   -54,  -111,  -111,  -111,
   -68,  -111,  -111,   -71,  -111,  -111,  -111,  -111,   -29,  -111,
   -37,   -38,   -39,   -40,  -111,  -111,  -111,  -111,  -111,  -111,
  -111,  -111,  -111,    -6,   -48,   -52,  -111,  -111,   -55,  -111,
   -64,  -111,   -67,  -111,  -111,  -111,  -111,   -18,   -28,  -111,
   -41,  -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,   -20,
  -111,   -57,   -56,  -111,  -111,  -111,   -16,  -111,   -14,  -111,
   -42,  -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,
   -53,  -111,  -111,  -111,   -12,  -111,  -111,   -36,  -111,  -111,
  -111,   -45,  -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,
  -111,   -19,  -111,   -69,  -111,  -111,   -17,  -111,   -46,   -44,
  -111,  -111,   -60,  -111,  -111,  -111,   -76,  -111,  -111,   -79,
   -15,   -65,  -111,  -111,   -13,   -43,   -58,  -111,  -111,   -61,
  -111,   -72,  -111,   -75,  -111,   -70,  -111,   -63,   -62,  -111,
  -111,   -66,   -59,  -111,  -111,  -111,  -111,   -77,  -111,   -73,
  -111,  -111,  -111,   -78,   -74 ]

racc_goto_table = [
    15,    97,     2,    99,     1,    12,     4,    15,   nil,    29,
   nil,    25,    12,    53,    54,    68,    56,   nil,   nil,   nil,
   nil,    15,   nil,   nil,   nil,   nil,    12,    15,   nil,     8,
    66,    69,    12,    64,   nil,   nil,    35,    40,    52,   nil,
   nil,   nil,    88,    89,    90,   nil,   nil,   nil,   nil,   nil,
    57,   nil,   nil,   nil,   nil,   nil,    62,   nil,    15,   nil,
   nil,   nil,   nil,    12,   nil,   nil,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   171,   nil,   nil,   nil,   143,   131,   100,    15,    15,
   109,    15,   nil,    12,    12,   nil,    12,   nil,   142,   185,
   nil,    69,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   199,   nil,    99,   126,   129,   nil,
   132,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,
    12,   nil,   nil,   164,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    15,   nil,   181,   nil,   nil,    12,   nil,   nil,
   nil,   164,   nil,   nil,   148,   164,   nil,   nil,   191,   156,
   194,   195,   nil,   197,   nil,   nil,   192,   nil,   nil,   nil,
   nil,   176,   nil,   nil,   nil,   nil,   nil,   183,   nil,   nil,
   nil,   188,   209,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   164,   nil,   nil,   nil,   nil,   164,   nil,   223,   nil,   nil,
    15,   nil,   nil,   nil,   164,    12,   nil,   nil,   164,   237,
   nil,   164,   164,   nil,   164,   nil,   212,   nil,   nil,   nil,
   nil,   218,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   221,
   225,   164,   nil,   nil,   228,   nil,   nil,   232,   235,   nil,
   238,    15,   nil,   nil,   nil,   nil,    12,   nil,   164,   nil,
   272,   nil,   nil,   nil,   nil,   nil,   nil,   254,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   262,   nil,   nil,   285,   267,   nil,   164,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   164,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   283,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   290 ]

racc_goto_check = [
    17,     8,     2,    10,     1,    14,     4,    17,   nil,     6,
   nil,     4,    14,    18,    18,    23,    18,   nil,   nil,   nil,
   nil,    17,   nil,   nil,   nil,   nil,    14,    17,   nil,     3,
    18,    18,    14,     6,   nil,   nil,     3,    22,    22,   nil,
   nil,   nil,    18,    18,    18,   nil,   nil,   nil,   nil,   nil,
     3,   nil,   nil,   nil,   nil,   nil,     3,   nil,    17,   nil,
   nil,   nil,   nil,    14,   nil,   nil,    18,    18,    18,    18,
    18,    18,    18,    18,    18,    18,    18,    18,    18,    18,
    18,    10,   nil,   nil,   nil,    23,    18,     3,    17,    17,
    22,    17,   nil,    14,    14,   nil,    14,   nil,    18,    10,
   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     8,   nil,    10,     3,     3,   nil,
     3,   nil,   nil,   nil,   nil,    17,   nil,   nil,   nil,   nil,
    14,   nil,   nil,    17,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    17,   nil,    18,   nil,   nil,    14,   nil,   nil,
   nil,    17,   nil,   nil,     3,    17,   nil,   nil,    18,     9,
    18,    18,   nil,    18,   nil,   nil,     6,   nil,   nil,   nil,
   nil,     3,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,
   nil,     9,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    17,   nil,   nil,   nil,   nil,    17,   nil,    18,   nil,   nil,
    17,   nil,   nil,   nil,    17,    14,   nil,   nil,    17,    18,
   nil,    17,    17,   nil,    17,   nil,     9,   nil,   nil,   nil,
   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,
     9,    17,   nil,   nil,     9,   nil,   nil,     9,     9,   nil,
     9,    17,   nil,   nil,   nil,   nil,    14,   nil,    17,   nil,
    18,   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     3,   nil,   nil,    18,     9,   nil,    17,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    17,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     9 ]

racc_goto_pointer = [
   nil,     4,     2,    26,     6,   nil,     0,   nil,   -58,    23,
   -56,   nil,   nil,   nil,     2,   nil,   nil,    -3,    -7,   nil,
   nil,   nil,    19,   -23,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    11,   nil,     5,   nil,   nil,
    34,    33,    10,   158,   161,    13,    14,    45,    43,   160,
   162,   163,   nil,   nil,    42 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 53, :_reduce_none,
  4, 54, :_reduce_2,
  5, 54, :_reduce_3,
  4, 54, :_reduce_4,
  1, 54, :_reduce_5,
  6, 57, :_reduce_6,
  5, 57, :_reduce_7,
  4, 57, :_reduce_8,
  5, 57, :_reduce_9,
  2, 56, :_reduce_10,
  1, 56, :_reduce_11,
  9, 59, :_reduce_12,
  11, 59, :_reduce_13,
  8, 59, :_reduce_14,
  10, 59, :_reduce_15,
  8, 59, :_reduce_16,
  10, 59, :_reduce_17,
  7, 59, :_reduce_18,
  9, 59, :_reduce_19,
  4, 60, :_reduce_20,
  2, 60, :_reduce_21,
  1, 62, :_reduce_22,
  1, 62, :_reduce_23,
  2, 58, :_reduce_24,
  1, 58, :_reduce_25,
  2, 55, :_reduce_26,
  1, 55, :_reduce_27,
  2, 61, :_reduce_28,
  1, 61, :_reduce_29,
  1, 64, :_reduce_30,
  1, 64, :_reduce_31,
  1, 64, :_reduce_32,
  1, 64, :_reduce_33,
  2, 64, :_reduce_34,
  4, 64, :_reduce_35,
  4, 65, :_reduce_36,
  1, 65, :_reduce_37,
  1, 65, :_reduce_38,
  1, 65, :_reduce_39,
  1, 65, :_reduce_40,
  2, 65, :_reduce_41,
  3, 65, :_reduce_42,
  6, 71, :_reduce_43,
  5, 71, :_reduce_44,
  4, 71, :_reduce_45,
  5, 71, :_reduce_46,
  3, 63, :_reduce_47,
  5, 63, :_reduce_48,
  3, 66, :_reduce_49,
  2, 66, :_reduce_50,
  2, 66, :_reduce_51,
  6, 67, :_reduce_52,
  8, 67, :_reduce_53,
  5, 67, :_reduce_54,
  6, 67, :_reduce_55,
  7, 67, :_reduce_56,
  7, 67, :_reduce_57,
  6, 72, :_reduce_58,
  8, 72, :_reduce_59,
  5, 72, :_reduce_60,
  6, 72, :_reduce_61,
  7, 72, :_reduce_62,
  7, 72, :_reduce_63,
  6, 68, :_reduce_64,
  10, 68, :_reduce_65,
  12, 68, :_reduce_66,
  6, 68, :_reduce_67,
  5, 68, :_reduce_68,
  9, 68, :_reduce_69,
  11, 68, :_reduce_70,
  5, 68, :_reduce_71,
  6, 73, :_reduce_72,
  10, 73, :_reduce_73,
  12, 73, :_reduce_74,
  6, 73, :_reduce_75,
  5, 73, :_reduce_76,
  9, 73, :_reduce_77,
  11, 73, :_reduce_78,
  5, 73, :_reduce_79,
  3, 69, :_reduce_80,
  4, 69, :_reduce_81,
  3, 74, :_reduce_82,
  2, 74, :_reduce_83,
  1, 76, :_reduce_84,
  1, 76, :_reduce_85,
  3, 75, :_reduce_86,
  1, 75, :_reduce_87,
  1, 70, :_reduce_88,
  1, 70, :_reduce_89,
  1, 70, :_reduce_90,
  1, 70, :_reduce_91,
  1, 70, :_reduce_92,
  2, 70, :_reduce_93,
  2, 70, :_reduce_94,
  3, 70, :_reduce_95,
  3, 70, :_reduce_96,
  3, 70, :_reduce_97,
  3, 70, :_reduce_98,
  3, 70, :_reduce_99,
  3, 70, :_reduce_100,
  3, 70, :_reduce_101,
  3, 70, :_reduce_102,
  3, 70, :_reduce_103,
  3, 70, :_reduce_104,
  3, 70, :_reduce_105,
  3, 70, :_reduce_106,
  3, 70, :_reduce_107,
  3, 70, :_reduce_108,
  3, 70, :_reduce_109,
  3, 70, :_reduce_110 ]

racc_reduce_n = 111

racc_shift_n = 295

racc_token_table = {
  false => 0,
  :error => 1,
  Program => 2,
  End => 3,
  With => 4,
  Do => 5,
  Begin => 6,
  TipoBooleano => 7,
  TipoNumero => 8,
  Read => 9,
  Write => 10,
  Writeln => 11,
  If => 12,
  Then => 13,
  Else => 14,
  While => 15,
  For => 16,
  From => 17,
  To => 18,
  By => 19,
  Repeat => 20,
  Times => 21,
  Func => 22,
  Return => 23,
  Div => 24,
  Mod => 25,
  True => 26,
  False => 27,
  Not => 28,
  And => 29,
  Or => 30,
  PuntoYComa => 31,
  Asignacion => 32,
  FirmaFuncion => 33,
  ParentesisAbre => 34,
  ParentesisCierra => 35,
  Coma => 36,
  Mas => 37,
  Menos => 38,
  Por => 39,
  Entre => 40,
  Modulo => 41,
  IgualQue => 42,
  DiferenteA => 43,
  MayorIgualQue => 44,
  MenorIgualQue => 45,
  MayorQue => 46,
  MenorQue => 47,
  :UMINUS => 48,
  CadenaDeCaracteres => 49,
  Identificadores => 50,
  LiteralesNumericos => 51 }

racc_nt_base = 52

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"program\"",
  "\"end\"",
  "\"with\"",
  "\"do\"",
  "\"begin\"",
  "\"boolean\"",
  "\"number\"",
  "\"read\"",
  "\"write\"",
  "\"writeln\"",
  "\"if\"",
  "\"then\"",
  "\"else\"",
  "\"while\"",
  "\"for\"",
  "\"from\"",
  "\"to\"",
  "\"by\"",
  "\"repeat\"",
  "\"times\"",
  "\"func\"",
  "\"return\"",
  "\"div\"",
  "\"mod\"",
  "\"true\"",
  "\"false\"",
  "\"not\"",
  "\"and\"",
  "\"or\"",
  "\";\"",
  "\"=\"",
  "\"->\"",
  "\"(\"",
  "\")\"",
  "\",\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"==\"",
  "\"/=\"",
  "\">=\"",
  "\"<=\"",
  "\">\"",
  "\"<\"",
  "UMINUS",
  "\"String\"",
  "\"Ident\"",
  "\"Num\"",
  "$start",
  "Inicio",
  "Alcance",
  "Instruccion",
  "Funciones",
  "Bloque",
  "Declaracion",
  "Funcion",
  "Argumento",
  "InstruccionFun",
  "Tipo",
  "DeclaF",
  "InstrF",
  "InstrFun",
  "IO",
  "Condicional",
  "Iteracion",
  "Llamada",
  "Expresion",
  "BloqueFun",
  "CondicionalFun",
  "IteracionFun",
  "Salida",
  "ArgumLlamada",
  "SalF" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'Parser.y', 86)
  def _reduce_2(val, _values, result)
    result = Programa.new([], Instrucciones.new(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 87)
  def _reduce_3(val, _values, result)
    result = Programa.new(Funciones.new(val[0]), Instrucciones.new(val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 88)
  def _reduce_4(val, _values, result)
    result = Programa.new(Funciones.new(val[0]), [])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 89)
  def _reduce_5(val, _values, result)
    result = Programa.new(Funciones.new(val[0]), [])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 92)
  def _reduce_6(val, _values, result)
    result = Bloque.new(Declaraciones.new(val[1]), Instrucciones.new(val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 93)
  def _reduce_7(val, _values, result)
    result = Bloque.new([], Instrucciones.new(val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 94)
  def _reduce_8(val, _values, result)
    result = Bloque.new([], [])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 95)
  def _reduce_9(val, _values, result)
    result = Bloque.new(Declaraciones.new(val[1]), [])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 98)
  def _reduce_10(val, _values, result)
    result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 99)
  def _reduce_11(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 102)
  def _reduce_12(val, _values, result)
    result = Funcion.new(Identificador.new(val[1]), Argumentos.new(val[3]), Instrucciones.new(val[6]))
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 103)
  def _reduce_13(val, _values, result)
    result = FuncionConTipo.new(Identificador.new(val[1]), Argumentos.new(val[3]), val[6], Instrucciones.new(val[8]))
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 104)
  def _reduce_14(val, _values, result)
    result = Funcion.new(Identificador.new(val[1]), [], Instrucciones.new(val[5]))
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 105)
  def _reduce_15(val, _values, result)
    result = FuncionConTipo.new(Identificador.new(val[1]), [], val[5], Instrucciones.new(val[7]))
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 106)
  def _reduce_16(val, _values, result)
    result = Funcion.new(Identificador.new(val[1]), Argumentos.new(val[3]), [])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 107)
  def _reduce_17(val, _values, result)
    result = FuncionConTipo.new(Identificador.new(val[1]), Argumentos.new(val[3]), val[6], [])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 108)
  def _reduce_18(val, _values, result)
    result = Funcion.new(Identificador.new(val[1]), [], [])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 109)
  def _reduce_19(val, _values, result)
    result = FuncionConTipo.new(Identificador.new(val[1]), [], val[5], [])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 112)
  def _reduce_20(val, _values, result)
    result = [Argumento.new(val[0], Identificador.new(val[1]))] + val[3]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 113)
  def _reduce_21(val, _values, result)
    result = [Argumento.new(val[0], Identificador.new(val[1]))]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 116)
  def _reduce_22(val, _values, result)
    result = Tipo.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 117)
  def _reduce_23(val, _values, result)
    result = Tipo.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 120)
  def _reduce_24(val, _values, result)
    result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 121)
  def _reduce_25(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 124)
  def _reduce_26(val, _values, result)
    result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 125)
  def _reduce_27(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 128)
  def _reduce_28(val, _values, result)
    result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 129)
  def _reduce_29(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 132)
  def _reduce_30(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 133)
  def _reduce_31(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 134)
  def _reduce_32(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 135)
  def _reduce_33(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 136)
  def _reduce_34(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 137)
  def _reduce_35(val, _values, result)
    result = AsignacionParser.new(Identificador.new(val[0]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 140)
  def _reduce_36(val, _values, result)
    result = AsignacionParser.new(Identificador.new(val[0]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 141)
  def _reduce_37(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 142)
  def _reduce_38(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 143)
  def _reduce_39(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 144)
  def _reduce_40(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 145)
  def _reduce_41(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 146)
  def _reduce_42(val, _values, result)
    result = Retorno.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 149)
  def _reduce_43(val, _values, result)
    result = Bloque.new(Declaraciones.new(val[1]), Instrucciones.new(val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 150)
  def _reduce_44(val, _values, result)
    result = Bloque.new([], Instrucciones.new(val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 151)
  def _reduce_45(val, _values, result)
    result = Bloque.new([], [])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 152)
  def _reduce_46(val, _values, result)
    result = Bloque.new(Declaraciones.new(val[1]), [])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 155)
  def _reduce_47(val, _values, result)
    result = Declaracion.new(val[0], Identificador.new(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 156)
  def _reduce_48(val, _values, result)
    result = Declaracion.new(val[0], AsignacionParser.new(Identificador.new(val[1]), val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 159)
  def _reduce_49(val, _values, result)
    result = Entrada.new(Identificador.new(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 160)
  def _reduce_50(val, _values, result)
    result = Salidas.new(val[1], val[0].text)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 161)
  def _reduce_51(val, _values, result)
    result = Salidas.new(val[1], val[0].text)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 164)
  def _reduce_52(val, _values, result)
    result = CondIf.new(val[1], Instrucciones.new(val[3]), val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 165)
  def _reduce_53(val, _values, result)
    result = CondIfElse.new(val[1], Instrucciones.new(val[3]), Instrucciones.new(val[5]), val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 166)
  def _reduce_54(val, _values, result)
    result = CondIf.new(val[1], [], val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 167)
  def _reduce_55(val, _values, result)
    result = CondIfElse.new(val[1], [], [], val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 168)
  def _reduce_56(val, _values, result)
    result = CondIfElse.new(val[1], [], Instrucciones.new(val[4]), val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 169)
  def _reduce_57(val, _values, result)
    result = CondIfElse.new(val[1], Instrucciones.new(val[3]), [], val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 172)
  def _reduce_58(val, _values, result)
    result = CondIf.new(val[1], Instrucciones.new(val[3]), val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 173)
  def _reduce_59(val, _values, result)
    result = CondIfElse.new(val[1], Instrucciones.new(val[3]), Instrucciones.new(val[5]), val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 174)
  def _reduce_60(val, _values, result)
    result = CondIf.new(val[1], [], val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 175)
  def _reduce_61(val, _values, result)
    result = CondIfElse.new(val[1], [], [], val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 176)
  def _reduce_62(val, _values, result)
    result = CondIfElse.new(val[1], [], Instrucciones.new(val[4]), val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 177)
  def _reduce_63(val, _values, result)
    result = CondIfElse.new(val[1], Instrucciones.new(val[3]), [], val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 180)
  def _reduce_64(val, _values, result)
    result = IterWhile.new(val[1], Instrucciones.new(val[3]), val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 181)
  def _reduce_65(val, _values, result)
    result = IterFor.new(Identificador.new(val[1]), val[3], val[5], Instrucciones.new(val[7]), val[2].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 182)
  def _reduce_66(val, _values, result)
    result = IterForBy.new(Identificador.new(val[1]), val[3], val[5], val[7], Instrucciones.new(val[9]), val[2].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 183)
  def _reduce_67(val, _values, result)
    result = IterRepeat.new(val[1], Instrucciones.new(val[3]), val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 184)
  def _reduce_68(val, _values, result)
    result = IterWhile.new(val[1], [], val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 185)
  def _reduce_69(val, _values, result)
    result = IterFor.new(Identificador.new(val[1]), val[3], val[5], [], val[2].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 186)
  def _reduce_70(val, _values, result)
    result = IterForBy.new(Identificador.new(val[1]), val[3], val[5], val[7], [], val[2].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 187)
  def _reduce_71(val, _values, result)
    result = IterRepeat.new(val[1], [], val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 190)
  def _reduce_72(val, _values, result)
    result = IterWhile.new(val[1], Instrucciones.new(val[3]), val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 191)
  def _reduce_73(val, _values, result)
    result = IterFor.new(Identificador.new(val[1]), val[3], val[5], Instrucciones.new(val[7]), val[2].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 192)
  def _reduce_74(val, _values, result)
    result = IterForBy.new(Identificador.new(val[1]), val[3], val[5], val[7], Instrucciones.new(val[9]), val[2].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 193)
  def _reduce_75(val, _values, result)
    result = IterRepeat.new(val[1], Instrucciones.new(val[3]), val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 194)
  def _reduce_76(val, _values, result)
    result = IterWhile.new(val[1], [], val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 195)
  def _reduce_77(val, _values, result)
    result = IterFor.new(Identificador.new(val[1]), val[3], val[5], [], val[2].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 196)
  def _reduce_78(val, _values, result)
    result = IterForBy.new(Identificador.new(val[1]), val[3], val[5], val[7], [], val[2].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 197)
  def _reduce_79(val, _values, result)
    result = IterRepeat.new(val[1], [], val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 201)
  def _reduce_80(val, _values, result)
    result = Llamada.new(Identificador.new(val[0]), [])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 202)
  def _reduce_81(val, _values, result)
    result = Llamada.new(Identificador.new(val[0]), Argumentos.new(val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 205)
  def _reduce_82(val, _values, result)
    result = [val[0]] + val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 206)
  def _reduce_83(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 209)
  def _reduce_84(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 210)
  def _reduce_85(val, _values, result)
    result = CadenaDeCaracteresParser.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 213)
  def _reduce_86(val, _values, result)
    result = [val[0]] + val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 214)
  def _reduce_87(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 217)
  def _reduce_88(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 218)
  def _reduce_89(val, _values, result)
    result = Numero.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 219)
  def _reduce_90(val, _values, result)
    result = Identificador.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 220)
  def _reduce_91(val, _values, result)
    result = Booleano.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 221)
  def _reduce_92(val, _values, result)
    result = Booleano.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 222)
  def _reduce_93(val, _values, result)
    result = Minus.new(val[1], val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 223)
  def _reduce_94(val, _values, result)
    result = Negacion.new(val[1], val[0].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 224)
  def _reduce_95(val, _values, result)
    result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 225)
  def _reduce_96(val, _values, result)
    result = Suma.new(val[0], val[2], val[1].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 226)
  def _reduce_97(val, _values, result)
    result = Resta.new(val[0], val[2], val[1].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 227)
  def _reduce_98(val, _values, result)
    result = Multiplicacion.new(val[0], val[2], val[1].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 228)
  def _reduce_99(val, _values, result)
    result = Division.new(val[0], val[2], val[1].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 229)
  def _reduce_100(val, _values, result)
    result = Resto.new(val[0], val[2], val[1].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 230)
  def _reduce_101(val, _values, result)
    result = DivisionEntera.new(val[0], val[2], val[1].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 231)
  def _reduce_102(val, _values, result)
    result = RestoEntero.new(val[0], val[2], val[1].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 232)
  def _reduce_103(val, _values, result)
    result = Conjuncion.new(val[0], val[2], val[1].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 233)
  def _reduce_104(val, _values, result)
    result = Disyuncion.new(val[0], val[2], val[1].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 234)
  def _reduce_105(val, _values, result)
    result = IgualQueParser.new(val[0], val[2], val[1].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 235)
  def _reduce_106(val, _values, result)
    result = MayorIgualQueParser.new(val[0], val[2], val[1].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 236)
  def _reduce_107(val, _values, result)
    result = MenorIgualQueParser.new(val[0], val[2], val[1].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 237)
  def _reduce_108(val, _values, result)
    result = DiferenteAParser.new(val[0], val[2], val[1].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 238)
  def _reduce_109(val, _values, result)
    result = MayorQueParser.new(val[0], val[2], val[1].line)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 239)
  def _reduce_110(val, _values, result)
    result = MenorQueParser.new(val[0], val[2], val[1].line)
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser


